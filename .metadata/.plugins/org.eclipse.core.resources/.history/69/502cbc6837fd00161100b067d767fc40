package com.aprilsulu.bank.resources;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Optional;

import javax.ws.rs.client.Entity;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Test;

import com.aprilsulu.bank.core.Account;
import com.aprilsulu.bank.core.Transaction;
import com.aprilsulu.bank.db.TransactionDAO;
import com.aprilsulu.bank.resources.PersonResource;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.google.common.collect.ImmutableList;

import io.dropwizard.testing.junit.ResourceTestRule;

/**
 * Unit tests for {@link PersonResource}.
 */
public final class PersonResourceTest {

	private static final TransactionDAO TRANSACTION_DAO = mock(TransactionDAO.class);
	@ClassRule
	public static final ResourceTestRule RESOURCES = ResourceTestRule.builder()
	.addResource(new TransactionResource(TRANSACTION_DAO))
	.setTestContainerFactory(new GrizzlyWebTestContainerFactory())
	.build();
	private Transaction transaction;

	@Before
	public void setup() {
		transaction = new Transaction(1,3,200);
	}

	@After
	public void tearDown() {
		reset(TRANSACTION_DAO);
	}

	@Test
	public void getAccountSuccess() {
		when(ACCOUNT_DAO.findById(1L)).thenReturn(Optional.of(account));

		final Account found = RESOURCES.target("/accounts/1").request().get(Account.class);

		assertThat(found.getId()).isEqualTo(account.getId());
		verify(ACCOUNT_DAO).findById(1L);
	}

	@Test
	public void getAccountNotFound() {
		when(ACCOUNT_DAO.findById(2L)).thenReturn(Optional.empty());
		final Response response = RESOURCES.target("/accounts/2").request().get();

		assertThat(response.getStatusInfo().getStatusCode()).isEqualTo(Response.Status.NOT_FOUND.getStatusCode());
		verify(ACCOUNT_DAO).findById(2L);
	}


	@Test
	public void listAccounts() throws Exception {
		final ImmutableList<Account> accounts = ImmutableList.of(account);
		when(ACCOUNT_DAO.findAll()).thenReturn(accounts);

		final List<Account> response = RESOURCES.target("/accounts")
				.request().get(new GenericType<List<Account>>() {
				});

		verify(ACCOUNT_DAO).findAll();
		assertThat(response).containsAll(accounts);
	}


	@Test
	public void createAccount() throws JsonProcessingException {
		when(ACCOUNT_DAO.create(any(Account.class))).thenReturn(account);
		final Response response = RESOURCES.target("/accounts")
				.request(MediaType.APPLICATION_JSON_TYPE)
				.post(Entity.entity(account, MediaType.APPLICATION_JSON_TYPE));

		assertThat(response.getStatusInfo()).isEqualTo(Response.Status.OK);
		verify(ACCOUNT_DAO).create(accountCaptor.capture());
		assertThat(accountCaptor.getValue()).isEqualTo(account);
	}
}
