package com.aprilsulu.bank.db;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.Optional;

import org.hibernate.exception.ConstraintViolationException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.aprilsulu.bank.core.Account;
import com.aprilsulu.bank.core.Transaction;

import io.dropwizard.testing.junit.DAOTestRule;

public final class TransactionDAOTest {

	@Rule
	public DAOTestRule daoTestRule = DAOTestRule.newBuilder()
	.addEntityClass(Transaction.class)
	.build();

	private TransactionDAO transactionDAO;

	@Before
	public void setUp() throws Exception {
		transactionDAO = new TransactionDAO(daoTestRule.getSessionFactory());
	}

	@Test
	public void createAccount() {
		final Transaction transaction = daoTestRule.inTransaction(() ->
		transactionDAO.create(new Transaction(1,3,200)));
		assertThat(transaction.getId()).isGreaterThan(0);
		assertThat(transaction.getFromAccountId()).isEqualTo(1);
		assertThat(transaction.getToAccountId()).isEqualTo(3);
		assertThat(transaction.getAmount()).isEqualTo(200);
		assertThat(transactionDAO.findById(transaction.getId())).isEqualTo(Optional.of(transaction));
	}

	@Test
	public void findAll() {
		daoTestRule.inTransaction(() -> {
			transactionDAO.create(new Transaction(1,3,200));
			transactionDAO.create(new Transaction(1,4,10.05));
			transactionDAO.create(new Transaction(3,2,133));
		});

		final List<Transaction> transactions = transactionDAO.findAll();
		assertThat(transactions).extracting("fromAccountId").containsOnly(1, 1, 3);
		assertThat(transactions).extracting("toAccountId").containsOnly(3, 4, 2);
		assertThat(transactions).extracting("amount").containsOnly(200, 10.05, 133);
	}

	@Test
	public void updateBalance() {
		final Account account = daoTestRule.inTransaction(() -> transactionDAO.create(new Account()));

		final long id = account.getId();
		assertThat(id).isGreaterThan(0);
		assertThat(account.getBalance()).isEqualTo(0);
		assertThat(transactionDAO.findById(account.getId())).isEqualTo(Optional.of(account));

		final Account accountAfterUpdate = daoTestRule.inTransaction(() -> accountDAO.updateBalance(id,500));
		assertThat(accountAfterUpdate.getId()).isEqualTo(id);
		assertThat(accountAfterUpdate.getBalance()).isEqualTo(500);
	}

	@Test(expected = ConstraintViolationException.class)
	public void handlesNullFullName() {
		daoTestRule.inTransaction(() -> transactionDAO.create(new Account()));
	}
}
