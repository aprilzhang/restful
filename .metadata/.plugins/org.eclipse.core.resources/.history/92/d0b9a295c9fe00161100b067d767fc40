package com.aprilsulu.account.db;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.Optional;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.aprilsulu.account.core.Account;
import com.aprilsulu.account.core.TransferInfo;

import io.dropwizard.testing.junit.DAOTestRule;

public final class AccountDAOTest {

	@Rule
	public DAOTestRule daoTestRule = DAOTestRule.newBuilder()
	.addEntityClass(Account.class)
	.build();

	private AccountDAO accountDAO;

	@Before
	public void setUp() throws Exception {
		accountDAO = new AccountDAO(daoTestRule.getSessionFactory());
	}

	@Test
	public void testCreateAccount() {
		final Account account = daoTestRule.inTransaction(() -> accountDAO.create(new Account()));
		assertThat(account.getId()).isGreaterThan(0);
		assertThat(account.getBalance()).isEqualTo(0);
		assertThat(accountDAO.findById(account.getId())).isEqualTo(Optional.of(account));
	}

	@Test
	public void testFindById() {
		final Account account = new Account(300.02);
		accountDAO.create(account);
		assertThat(accountDAO.findById(account.getId())).isEqualTo(Optional.of(account));
	}

	@Test
	public void testFindByIdNotFound() {
		assertThat(accountDAO.findById(-2)).isEqualTo(Optional.empty());
	}

	@Test
	public void testFindAllEmpty() {

		final List<Account> accounts = accountDAO.findAll();
		assertThat(accounts).isEmpty();
	}

	@Test
	public void testFindAll() {
		daoTestRule.inTransaction(() -> {
			accountDAO.create(new Account());
			accountDAO.create(new Account(200));
			accountDAO.create(new Account(1.01));
		});

		final List<Account> accounts = accountDAO.findAll();
		assertThat(accounts).extracting("balance").containsOnly(0.0, 200.0,1.01);
	}

	@Test
	public void testTransfer() {
		final Account account1 = new Account();
		account1.setBalance(300);
		final Account account2 = new Account();
		account2.setBalance(100);

		daoTestRule.inTransaction(() -> {
			accountDAO.create(account1);
			accountDAO.create(account2);
		});
		final TransferInfo transfer = new TransferInfo(1,2,200);
		accountDAO.transfer(transfer);

		assertThat(accountDAO.findById(account1.getId()).get().getBalance()).isEqualTo(100);
		assertThat(accountDAO.findById(account2.getId()).get().getBalance()).isEqualTo(300);
	}

	@Test(expected = NullPointerException.class)
	public void testTransferWithNull() {
		accountDAO.transfer(null);
	}

	@Test(expected = NullPointerException.class)
	public void testTransferNegativeAmount() {
		final Account account1 = new Account();
		account1.setBalance(50);

		accountDAO.create(account1);
		accountDAO.transfer(new TransferInfo(account1.getId(),-2,200));
	}

	@Test(expected = NullPointerException.class)
	public void testTransferWithIdNotFound() {
		final Account account1 = new Account();
		account1.setBalance(50);

		accountDAO.create(account1);
		accountDAO.transfer(new TransferInfo(account1.getId(),-2,200));
	}

	@Test(expected = IllegalStateException.class)
	public void testTransferWithNotEnoughBalance() {
		final Account account1 = new Account();
		account1.setBalance(50);
		final Account account2 = new Account();
		account2.setBalance(100);

		daoTestRule.inTransaction(() -> {
			accountDAO.create(account1);
			accountDAO.create(account2);
		});
		final TransferInfo transfer = new TransferInfo(account1.getId(),account2.getId(),200);
		accountDAO.transfer(transfer);
	}
}
